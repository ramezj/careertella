generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime
  User              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Applicant {
  id         String   @id
  name       String
  number     BigInt
  motivation String   @default("")
  email      String
  linkedIn   String?
  twitter    String?
  github     String?
  createdAt  DateTime @default(now())
  status     Status   @default(SUBMITTED)
  resumeKey  String
  jobId      String
  Job        Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

model Job {
  id             String       @id
  title          String
  type           Type         @default(FULLTIME)
  location       String?
  content        String
  createdAt      DateTime     @default(now())
  organizationId String
  Applicant      Applicant[]
  Organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model Organization {
  id          String  @id
  name        String?
  slug        String  @unique
  website     String?
  description String  @default("")
  userId      String  @unique
  Job         Job[]
  User        User    @relation(fields: [userId], references: [id])
}

model Session {
  sessionToken String   @id @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String        @id
  name           String?
  email          String        @unique
  firstTimeUser  Boolean       @default(true)
  trial          Boolean       @default(true)
  trialStartedAt DateTime?
  trialEndsAt    DateTime?
  isPremium      Boolean       @default(false)
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime
  Account        Account[]
  Organization   Organization?
  Session        Session[]
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum Status {
  SUBMITTED
  UNDERREVIEW
  INTERVIEW
  OFFER
  REJECTED
  HIRED
}

enum Type {
  FULLTIME
  PARTTIME
  INTERNSHIP
  CONTRACT
}
